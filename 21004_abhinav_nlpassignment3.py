# -*- coding: utf-8 -*-
"""21004_Abhinav_nlpassignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16uEifT6pNCI7Xi-sllhS-Pu3R7DwKOMq

### NLP Assignment-3 , part a

Load data
"""

!wget https://raw.githubusercontent.com/debajyotimaz/nlp_assignment/main/train_split.csv
!wget https://raw.githubusercontent.com/debajyotimaz/nlp_assignment/main/test_split.csv

!wget https://github.com/Abhinav2158/NLP_Assignment/raw/refs/heads/main/bert_emotion_model_new.pth

from sklearn.metrics import classification_report, accuracy_score, f1_score
import numpy as np
import torch
from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader, Dataset
from sklearn.model_selection import train_test_split
import pandas as pd
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


train_data = pd.read_csv("/content/train_split.csv")
test_data = pd.read_csv("/content/test_split.csv")
data = pd.concat([train_data, test_data], ignore_index=True)


class EmotionDataset(Dataset):
    def __init__(self, data, tokenizer, max_length=128):
        self.data = data
        self.texts = data['text'].tolist()
        self.labels = data[['Joy', 'Fear', 'Anger', 'Sadness', 'Surprise']].values
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        text = self.texts[idx]
        inputs = self.tokenizer(
            text, padding="max_length", truncation=True, max_length=self.max_length, return_tensors="pt"
        )
        labels = torch.tensor(self.labels[idx], dtype=torch.float)
        return {
            "input_ids": inputs["input_ids"].squeeze(),
            "attention_mask": inputs["attention_mask"].squeeze(),
            "labels": labels
        }

#BERT tokenizer and model
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=5)
model.to(device)

model.load_state_dict(torch.load("bert_emotion_model_new.pth", map_location=device))



train_df, val_df = train_test_split(train_data, test_size=0.1, random_state=42)

train_dataset = EmotionDataset(train_df, tokenizer)
val_dataset = EmotionDataset(val_df, tokenizer)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=8)

optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)
criterion = torch.nn.BCEWithLogitsLoss()



def train(model, data_loader, optimizer, criterion, device):
    model.train()
    total_loss = 0
    for batch in data_loader:
        input_ids = batch["input_ids"].to(device)
        attention_mask = batch["attention_mask"].to(device)
        labels = batch["labels"].to(device)

        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask)
        loss = criterion(outputs.logits, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()

    avg_loss = total_loss / len(data_loader)
    return avg_loss



# Evaluation
def evaluate(model, data_loader, criterion, device):
    model.eval()
    total_loss = 0
    preds, targets = [], []
    with torch.no_grad():
        for batch in data_loader:
            input_ids = batch["input_ids"].to(device)
            attention_mask = batch["attention_mask"].to(device)
            labels = batch["labels"].to(device)

            outputs = model(input_ids, attention_mask=attention_mask)
            loss = criterion(outputs.logits, labels)
            total_loss += loss.item()

            preds.extend(torch.sigmoid(outputs.logits).cpu().numpy())
            targets.extend(labels.cpu().numpy())

    avg_loss = total_loss / len(data_loader)
    return avg_loss, np.array(preds), np.array(targets)




# #Training
# epochs = 3
# for epoch in range(epochs):
#     train_loss = train(model, train_loader, optimizer, criterion, device)
#     val_loss, val_preds, val_targets = evaluate(model, val_loader, criterion, device)

#     # (threshold 0.5 for multi-label classification)
#     val_preds = (val_preds >= 0.5).astype(int)

#     accuracy = accuracy_score(val_targets, val_preds)
#     f1 = f1_score(val_targets, val_preds, average="macro")

#     print(f"Epoch {epoch + 1}/{epochs}")
#     print(f"Train Loss: {train_loss:.4f}, Validation Loss: {val_loss:.4f}")
#     print(f"Validation Accuracy: {accuracy:.4f}, Macro F1 Score: {f1:.4f}")

#     print("Classification Report (Validation):")
#     print(classification_report(val_targets, val_preds, target_names=['Joy', 'Fear', 'Anger', 'Sadness', 'Surprise'], zero_division=0))

# torch.save(model.state_dict(), "bert_emotion_model_new.pth")



# Test set evaluation
test_dataset = EmotionDataset(test_data, tokenizer)
test_loader = DataLoader(test_dataset, batch_size=8)

_, test_preds, test_targets = evaluate(model, test_loader, criterion, device)
test_preds = (test_preds >= 0.5).astype(int)

test_accuracy = accuracy_score(test_targets, test_preds)
test_f1 = f1_score(test_targets, test_preds, average="macro")

print(f"Test Accuracy: {test_accuracy:.4f}, Test Macro F1 Score: {test_f1:.4f}")
print("Classification Report (Test):")
print(classification_report(test_targets, test_preds, target_names=['Joy', 'Fear', 'Anger', 'Sadness', 'Surprise'], zero_division=0))

